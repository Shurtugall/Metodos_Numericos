# Trabalho T1 - Erros em Aproxima√ß√µes num√©ricas

### MTM 224 - M√©todos Num√©ricos Computacionais
### Eng. Qu√≠mica(305) - Turma 14

*Nome*: Gabriel Righi

*Matr√≠cula*: 201612819

## Quest√£o 1
Pesquise e responda: O que √© o *√âpsilon da M√°quina*? Apresente um programa em
python para obter o √©psilon do computador que voc√™ usa. Qual o valor obtido com
seu programa?

###### Resposta:
√âpsilon da m√°quina √© o menor n√∫mero que somado a 1 produza resultado diferente de 1.
Devido a limita√ß√£o de mem√≥ria que podemos representar com a quantidade de bits dispon√≠veis
em um _Float_ , existe um n√∫mero t√£o pequeno que causa um _Erro_ de arredondamento, de forma
que √© representado pela letra grega "Œµ".

'''
Defini√ß√£o da fun√ß√£o "main", a qual utiliza divis√µes por 2 consecutivas at√© encontrar
o menor n√∫mero represent√°vel que satisfa√ßa a condi√ß√£o do "While" em que o n√∫mero somado
com 1, seja maior que 1
'''

def main():
    eps = 1;
    while(eps+1) > 1:
        eps = eps/2
    
    eps = eps*2
    print(eps)
    
#Utilizado para chamar a fun√ß√£o main    
main()

Quest√£o 2
Use um progama em Python para realizar a soma  ùëÜ1=1000+‚àë10000ùëõ=00.1  e a soma  ùëÜ2=‚àë10000ùëõ=00.1+1000 . Compare os resultados e comente.

###### Resposta:
A diferen√ßa de valores se d√° pelo fato que o computador n√£o consegue representar certos n√∫meros de forma exata, ocorrem diferen√ßas
devido aos bits utilizados ao somar n√∫meros muito pequenos com n√∫meros muito grandes, o que cria essa discrep√¢ncia entre os valores.
Enquanto S1 soma 1000 com o valor de $x$ que foi definido pela soma consecutiva no la√ßo _for_ , o valor se faz diferente em S2, onde
soma-se 0.1 a um n√∫mero muito grande, no caso 1000.

---
## Quest√£o 3
Considere as express√µes:
$\frac{e^{\frac{1}{x}}}{1 + e^{\frac{1}{x}}}$  e  $\frac{1}{e^{\frac{1}{x}} + 1}$. Verique que,
para $x$ > 0, s√£o fun√ß√µes id√™nticas, ent√£o, use um programa em Python para testar o valor de cada uma para alguns valores
de $x$ entre 0.1 e 0.001. Qual. dessas express√µes √© mais adequada quando x √© um n√∫mero pequeno? Explique.

###### Resposta:
Como √© poss√≠vel verificar, quando $x$ √© um n√∫mero pequeno, a precis√£o da segunda equa√ß√£o √© muito superior, visto que na primeira
equa√ß√£o, o sistema reconhece o valor apenas como 1.0. O mais prov√°vel de se afirmar √© que a primeira equa√ß√£o trabalha com a soma
n√∫meros t√£o pequenos com n√∫meros grandes de modo que o computador n√£o reconhece e acaba "arredondando", de forma que o valor que
deveria variar em 1.0 n√£o √© representado.

---
## Quest√£o 4
A f√≥rmula de Leibniz para o n√∫mero $\pi$ √© dada pela s√©rie infinita $\frac{\pi}{4} = \sum_{n = 0}^{\infty} \frac{(-1)^{n}}{2n+1}$.
Apresente um programa em Python para obter uma aproxima√ß√µes para $\pi$ usando 50 termos da s√©rie. Calcule os erros absoluto e relativo.

## Quest√£o 5
O m√©todo "divida e fa√ßa a m√©dia", um m√©todo antigo para aproximar a raiz quadrada
de qualquer n√∫mero positivo $a$, pode ser formulado por $x_{i+1} = \frac{x_{i} + \frac{a}{x_{i}}}{2}$.
Fa√ßa um programa para calcular $\sqrt7$ com erro relativo inferior a ${10}^{-5}$.

**OBS**: O valor do erro absoluto como podemos ver, de fato √© inferior a ${10}^{-5}$, por√©m por ser um n√∫mero pequeno, o computador
reconheceu apenas como 0 absoluto, mas se compararmos manualmente, √© poss√≠vel ver a distin√ß√£o de valores.
